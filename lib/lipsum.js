// Generated by CoffeeScript 2.2.4
  /*
   * Lorem Ipsum Wrapper

  Main entry point for the node-lipsum module. Provides wrappers for
  the Parser and Service classes as well as an easy method to get text
  from the lipsum.com service.
   */
var Lipsum, Parser, Service, events,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

Service = require('./service');

Parser = require('./parser');

events = require('events');

Lipsum = (function() {
  class Lipsum extends events.EventEmitter {
    constructor() {
      super();
      this.getText = this.getText.bind(this);
      this.parserSuccessCallBack = this.parserSuccessCallBack.bind(this);
      this.serviceCallback = this.serviceCallback.bind(this);
      this.parser = new Parser();
      this.service = new Service();
    }

    getText(callback, opts) {
      var i, len, prop, ref;
      boundMethodCheck(this, Lipsum);
      /*
      Retrieves dummy text from lipsum.com

      callback: {Function} Should take one parameter for the text
                returned from lipsum.com. Called on successful retrieval
                of said text.

      opts: {Object} Options to pass onto the lipsum.com query. These will
            be transformed into url query params, so if you pass in something
            like {start: 'yes', what: 'bytes'} that will become
            "?start=yes&what=bytes"
      */
      if (!opts) {
        opts = this.defaults;
      } else {
        ref = this.defaults;
        for (i = 0, len = ref.length; i < len; i++) {
          prop = ref[i];
          if (opts[prop] == null) {
            opts[prop] = this.defaults[prop];
          }
        }
      }
      this.service.get("json", this.serviceCallback, opts);
      return this.once('lipsum', function(txt) {
        return callback(txt);
      });
    }

    parserSuccessCallBack(result) {
      boundMethodCheck(this, Lipsum);
      /* Called on successful parsing of returned dummy text. */
      return this.emit('lipsum', result.feed.lipsum);
    }

    parserErrorCallBack(err) {
      /* Called on Parser Error. */
      throw new Error(`Parser Error: ${err.message}`);
    }

    serviceCallback(text) {
      boundMethodCheck(this, Lipsum);
      /*
      Called when the lipsum.com service succesfully retrieves
      text from the lipsum.com service.
      */
      return this.parser.feed(text).parse(this.parserSuccessCallBack, this.parserErrorCallBack);
    }

  };

  Lipsum.prototype.defaults = {
    /*
    These parameters will be passed by default to lipsum.com in the query
    */
    amount: 5,
    what: 'paras',
    start: 'no'
  };

  return Lipsum;

}).call(this);

if (typeof module !== "undefined" && module !== null) {
  module.exports = Lipsum;
}
